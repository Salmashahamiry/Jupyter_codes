#!/usr/bin/env python
# coding: utf-8

# In[2]:


#Pie Charts, Box Plots, Scatter Plots, and Bubble Plots¶


# In[4]:


#Import primary modules.
import numpy as np  # useful for many scientific computing in Python
import pandas as pd # primary data structure library

#Importing Matplotlib

import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.style.use('ggplot') # optional: for ggplot-like style

# check for latest version of Matplotlib
print('Matplotlib version: ', mpl.__version__) # >= 2.0.0


# In[18]:


df_can = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/Canada.csv')

print('Data read into a pandas dataframe!')


# In[19]:


df_can.head()


# In[20]:


df_can.shape


# In[21]:


df_can.set_index('Country',inplace=True)


# In[14]:


df_can.head()


# In[22]:


df_can.shape


# In[23]:


#Finally, let's create a list of years from 1980 - 2013, this will come in handy when we start plotting the data

years = list(map(str, range(1980, 2014)))
years


# In[ ]:


#Pie Charts 
#A pie chart is a circular graphic that displays numeric proportions by dividing a circle (or pie) 
#into proportional slices. You are most likely already familiar with pie charts as it is widely used in 
#business and media. We can create pie charts in Matplotlib by passing in the kind=pie keyword.
#
#Let's use a pie chart to explore the proportion (percentage) of new immigrants grouped by continents for
#the entire time period from 1980 to 2013.


# In[25]:


# group countries by continents and apply sum() function 
df_continents = df_can.groupby('Continent', axis=0).sum()

# note: the output of the groupby method is a `groupby' object. 
# we can not use it further until we apply a function (eg .sum())
print(type(df_can.groupby('Continent', axis=0)))



# In[26]:


df_continents.head()


# In[30]:


#simple show
df_continents['Total'].plot(kind='pie')
plt.show()


# In[27]:


# autopct create %, start angle represent starting point
df_continents['Total'].plot(kind='pie',
                            figsize=(5, 6),
                            autopct='%1.1f%%', # add in percentages
                            startangle=90,     # start angle 90° (Africa)
                            shadow=True,       # add shadow      
                            )

plt.title('Immigration to Canada by Continent [1980 - 2013]')
plt.axis('equal') # Sets the pie chart to look like a circle.
plt.legend(labels=df_continents.index, loc='upper left') 


plt.show()


# In[28]:


colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']
explode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.

df_continents['Total'].plot(kind='pie',
                            figsize=(10, 6),
                            autopct='%1.1f%%', 
                            startangle=90,    
                            shadow=True,       
                            labels=None,         # turn off labels on pie chart
                            pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct 
                            #colors=colors_list,  # add custom colors
                            #explode=explode_list # 'explode' lowest 3 continents
                            )

# scale the title up by 12% to match pctdistance
plt.title('Immigration to Canada by Continent [1980 - 2013]', y=1.12, fontsize = 15) 

plt.axis('equal') 

# add legend
plt.legend(labels=df_continents.index, loc='upper left', fontsize=7) 

plt.show()


# In[33]:


#*****Box Plots*****
#A box plot is a way of statistically representing the distribution of the data through five main dimensions:

#Minimum: The smallest number in the dataset excluding the outliers.
#First quartile: Middle number between the minimum and the median.
#Second quartile (Median): Middle number of the (sorted) dataset.
#Third quartile: Middle number between median and maximum.
#Maximum: The largest number in the dataset excluding the outliers.


# In[34]:


# to get a dataframe, place extra square brackets around 'Japan'.
df_japan = df_can.loc[['Japan'], years].transpose() # transpose switch the row and column 
df_japan.head()


# In[35]:


df_japan.plot(kind='box', figsize=(8, 6))

plt.title('Box plot of Japanese Immigrants from 1980 - 2013')
plt.ylabel('Number of Immigrants')

plt.show()


# In[36]:


df_japan.describe()


# In[ ]:


#Subplots


# In[38]:


#fig = plt.figure() # create figure

#ax0 = fig.add_subplot(1, 2, 1) # add subplot 1 (1 row, 2 columns, first plot)
#ax1 = fig.add_subplot(1, 2, 2) # add subplot 2 (1 row, 2 columns, second plot). See tip below**

# Subplot 1: Box plot
#df_CI.plot(kind='box', color='blue', vert=False, figsize=(20, 6), ax=ax0) # add to subplot 1
#ax0.set_title('Box Plots of Immigrants from China and India (1980 - 2013)')
#ax0.set_xlabel('Number of Immigrants')
#ax0.set_ylabel('Countries')

# Subplot 2: Line plot
#df_CI.plot(kind='line', figsize=(20, 6), ax=ax1) # add to subplot 2
#ax1.set_title ('Line Plots of Immigrants from China and India (1980 - 2013)')
#ax1.set_ylabel('Number of Immigrants')
#ax1.set_xlabel('Years')

#plt.show()


# In[40]:


#Question
#Question: Create a box plot to visualize the distribution of the top 15 countries (based on total immigration) grouped by the decades 1980s, 1990s, and 2000s.

#Step 1: Get the dataset. Get the top 15 countries based on Total immigrant population. Name the dataframe df_top15.
#The correct answer is:
df_top15 = df_can.sort_values(['Total'], ascending=False, axis=0).head(15)
df_top15


# In[47]:


# create a list of all years in decades 80's, 90's, and 00's
years_80s = list(map(str, range(1980, 1990))) 
years_90s = list(map(str, range(1990, 2000))) 
years_00s = list(map(str, range(2000, 2010))) 
# slice the original dataframe df_can to create a series for each decade
df_80s = df_top15.loc[:, years_80s].sum(axis=1) 
df_90s = df_top15.loc[:, years_90s].sum(axis=1) 
df_00s = df_top15.loc[:, years_00s].sum(axis=1)


# In[49]:


# display dataframe
    # merge the three series into a new data frame

new_df = pd.DataFrame({'1980s': df_80s, '1990s': df_90s, '2000s':df_00s}) 

new_df.head()


# In[50]:


#plot the box
  #The correct answer is:    
new_df.plot(kind='box', figsize=(10, 6))

plt.title('Immigration from top 15 countries for decades 80s, 90s and 2000s')

plt.show()


# In[51]:


#Scatter Plots 
# we can use the sum() method to get the total population per year
df_tot = pd.DataFrame(df_can[years].sum(axis=0))

# change the years to type int (useful for regression later on)
df_tot.index = map(int, df_tot.index)

# reset the index to put in back in as a column in the df_tot dataframe
df_tot.reset_index(inplace = True)

# rename columns
df_tot.columns = ['year', 'total']

# view the final dataframe
df_tot.head()


# In[52]:


df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')

plt.title('Total Immigration to Canada from 1980 - 2013')
plt.xlabel('Year')
plt.ylabel('Number of Immigrants')

plt.show()


# In[ ]:


#Bubble Plots


# In[ ]:




